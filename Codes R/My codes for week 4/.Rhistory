}
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in the_k_position){
count <- count + 1
real_kmers <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers)!=0){
r_kmers[count] <- real_kmers
}
}
}
r_kmers
count
real_kmers
real_kmers
real_pos[i]
the_k_position[o]
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
count <- count + 1
real_kmers <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers)!=0){
r_kmers[count] <- real_kmers
}
}
}
r_kmers
real_pos
the_k_position
real_pos[i]
the_k_position[o]
real_pos[i]-the_k_position[o]==1
which(real_pos[i]-the_k_position[o]==1
)
real_kmers[which(real_pos[i]-the_k_position[o]==1)]
real_kmers
real_kmers <- substr(positions,start=1,stop=len)
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
count <- count + 1
real_kmers <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers)!=0){
r_kmers[count] <- real_kmers
}
}
}
r_kmers
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
count <- count + 1
real_kmers_2 <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers)!=0){
r_kmers[count] <- real_kmers_2
}
}
}
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
count <- count + 1
real_kmers_2 <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers_2)!=0){
r_kmers[count] <- real_kmers_2
}
}
}
r_kmers
next_k <- r_kmers[!is.na(r_kmers)]
next_k
paste0(next_k, collapse=",")
overlap_graph <- function(kmers, sequence=""){
if(length(kmers)==1){
kmers <- strsplit(kmers, " ")[[1]]
}
kmers <- sort(kmers)
len <- nchar(kmers[1])
result <- sapply(1:length(kmers),function(x){
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
if(length(next_k) != 0){
if(length(next_k) > 1){
if(sequence != ""){
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions <- unique(unlist(positions))
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
count <- count + 1
real_kmers_2 <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers_2)!=0){
r_kmers[count] <- real_kmers_2
}
}
}
next_k <- r_kmers[!is.na(r_kmers)]
}
next_k <- paste0(next_k, collapse=",")
}
k_vector <- paste(the_k, "->",next_k)
}
else{
k_vector <- NA
}
k_vector
})
result <- result[!is.na(result)]
return(result)
}
de_bruijn_graph(sequence,k)
sequence <- "AAGATTCTCTAAGA"
k <- 4
de_bruijn_graph(sequence,k)
k <- as.numeric(k)-1
kmers <- (composition_k(sequence, k))
kmers <- sort(kmers)
kmers
x<-10
kmers <- sort(kmers)
len <- nchar(kmers[1])
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
next_k
sequence != ""
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions
positions <- unique(unlist(positions))
positions
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
real_pos
real_kmers
count <- 0
r_kmers <- NULL
real_pos
i=1
the_k_position
o=1
count <- count + 1
real_kmers[which(real_pos[i]-the_k_position[o]==1)]
which(real_pos[i]-the_k_position[o]==1)
real_pos[i]-the_k_position[o]
real_kmers_2 <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
length(real_kmers_2)!=0
count <- count + 1
o=2
which(real_pos[i]-the_k_position[o]==1)
real_kmers
real_kmers[which(real_pos[i]-the_k_position[o]==1)]
real_kmers_2 <- real_kmers[which(real_pos[i]-the_k_position[o]==1)]
if(length(real_kmers_2)!=0){
r_kmers[count] <- real_kmers_2
}
r_kmers
o=1
i=2
which(real_pos[i]-the_k_position[o]==1)
o=2
which(real_pos[i]-the_k_position[o]==1)
i=3
o=1
which(real_pos[i]-the_k_position[o]==1)
real_kmers
real_pos[i]
the_k_position[o]==1
the_k_position[o]
real_pos[i]-the_k_position[o]==1)
real_pos[i]-the_k_position[o]==1
real_kmers_2
real_pos
the_k_position
real_kmers
real_kmers[i]
next_k_position
the_k_position
next_k_position
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions
n=1
gregexpr2(next_k[n],sequence)[[1]]
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
gregexpr2(the_k,sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position[next_k_position>the_k_position]
overlap_graph <- function(kmers, sequence=""){
if(length(kmers)==1){
kmers <- strsplit(kmers, " ")[[1]]
}
kmers <- sort(kmers)
len <- nchar(kmers[1])
result <- sapply(1:length(kmers),function(x){
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
if(length(next_k) != 0){
if(length(next_k) > 1){
if(sequence != ""){
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
next_k_position <- next_k_position[!is.na(next_k_position)]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions <- unique(unlist(positions))
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
if(real_pos[i]-the_k_position[o]==1){
count <- count + 1
r_kmers[count] <- real_kmers[i]
}
}
}
next_k <- r_kmers[!is.na(r_kmers)]
}
next_k <- paste0(next_k, collapse=",")
}
k_vector <- paste(the_k, "->",next_k)
}
else{
k_vector <- NA
}
k_vector
})
result <- result[!is.na(result)]
return(result)
}
de_bruijn_graph(sequence,k)
sequence <- "AAGATTCTCTAAGA"
k <- 4
de_bruijn_graph(sequence,k)
kmers <- readLines("data/dataset_198_9.txt")[1:500]
result <- overlap_graph(kmers)
result
data <- readLines("data/De_Bruijn_Graph_from_a_String.txt")
head(data)
data <- readLines("data/De_Bruijn_Graph_from_a_String.txt")
sequence <- data[3]
k <- as.numeric(data[2])
de_bruijn_graph(sequence, k)
k <- as.numeric(k)-1
kmers <- (composition_k(sequence, k))
kmers <- sort(kmers)
if(length(kmers)==1){
kmers <- strsplit(kmers, " ")[[1]]
}
kmers <- sort(kmers)
len <- nchar(kmers[1])
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
length(next_k) != 0
length(next_k) > 1
k_vector <- paste(the_k, "->",next_k)
k_vector
x
x<-1
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
length(next_k) != 0
length(next_k) > 1
for(x in 1:length(kmers){
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
if(length(next_k) != 0){
if(length(next_k) > 1){
if(sequence != ""){
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
next_k_position <- next_k_position[!is.na(next_k_position)]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions <- unique(unlist(positions))
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
if(real_pos[i]-the_k_position[o]==1){
count <- count + 1
r_kmers[count] <- real_kmers[i]
}
}
}
next_k <- r_kmers[!is.na(r_kmers)]
}
next_k <- paste0(next_k, collapse=",")
}
k_vector <- paste(the_k, "->",next_k)
}
else{
k_vector <- NA
}
k_vector
}
for(x in 1:length(kmers)){
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
if(length(next_k) != 0){
if(length(next_k) > 1){
if(sequence != ""){
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
next_k_position <- next_k_position[!is.na(next_k_position)]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions <- unique(unlist(positions))
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
if(real_pos[i]-the_k_position[o]==1){
count <- count + 1
r_kmers[count] <- real_kmers[i]
}
}
}
next_k <- r_kmers[!is.na(r_kmers)]
}
next_k <- paste0(next_k, collapse=",")
}
k_vector <- paste(the_k, "->",next_k)
}
else{
k_vector <- NA
}
k_vector
}
k<-11
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
length(next_k) != 0
length(next_k) > 1
sequence != ""
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
next_k_position <- next_k_position[!is.na(next_k_position)]
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
positions
n=2
gregexpr2(next_k[n],sequence)[[1]]
gregexpr2(the_k,sequence)[[1]]
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position[next_k_position>the_k_position]
next_k_position <- next_k_position[next_k_position>the_k_position]
next_k_position
next_k_position
next_k_position <- next_k_position[!is.na(next_k_position)]
next_k_position
positions[[n]]
next_k[n]
next_k_position
length(next_k_position)>0
overlap_graph <- function(kmers, sequence=""){
if(length(kmers)==1){
kmers <- strsplit(kmers, " ")[[1]]
}
kmers <- sort(kmers)
len <- nchar(kmers[1])
result <- sapply(1:length(kmers),function(x){
the_k <- kmers[x]
n_next_k <- substr(kmers[x],start=2,stop=len)
next_k <- kmers[grepl(paste0("^",n_next_k),kmers)]
if(length(next_k) != 0){
if(length(next_k) > 1){
if(sequence != ""){
positions <- list()
for(n in 1:length(next_k)){
next_k_position <- gregexpr2(next_k[n],sequence)[[1]]
the_k_position <- gregexpr2(the_k,sequence)[[1]]
next_k_position <- next_k_position[next_k_position>the_k_position]
next_k_position <- next_k_position[!is.na(next_k_position)]
if(length(next_k_position)>0){
positions[[n]] <- paste0(next_k[n],",",next_k_position)
}
}
positions <- unique(unlist(positions))
real_kmers <- substr(positions,start=1,stop=len)
real_pos <- as.numeric(substr(positions,start=len+2,stop=nchar(positions)))
count <- 0
r_kmers <- NULL
for(i in 1:length(real_pos)){
for(o in 1:length(the_k_position)){
if(real_pos[i]-the_k_position[o]==1){
count <- count + 1
r_kmers[count] <- real_kmers[i]
}
}
}
next_k <- r_kmers[!is.na(r_kmers)]
}
next_k <- paste0(next_k, collapse=",")
}
k_vector <- paste(the_k, "->",next_k)
}
else{
k_vector <- NA
}
k_vector
})
result <- result[!is.na(result)]
return(result)
}
data <- readLines("data/De_Bruijn_Graph_from_a_String.txt")
sequence <- data[3]
k <- as.numeric(data[2])
de_bruijn_graph(sequence, k)
result <- de_bruijn_graph(sequence, k)
write.table(result, file="output/debruijngraph_result.txt", quote=F,
sep="\n", row.names=F, col.names=F)
data <- readLines("data/dataset_199_6.txt")
sequence <- data[2]
k <- as.numeric(data[1])
as.numeric(data[1])
result <- de_bruijn_graph(sequence, k)
write.table(result, file="output/debruijngraph_result.txt", quote=F,
sep="\n", row.names=F, col.names=F)
string_spelled <- function(kmers){
if(length(kmers)==1){
kmers <- strsplit(kmers, " ")[[1]]
}
start_sequence <- kmers[1]
len <- nchar(kmers[1])
rest <- sapply(2:length(kmers),function(x){
substr(kmers[x],len,len)
})
sequence <- paste(start_sequence, paste(rest, sep="", collapse=""),
sep="", collapse="")
return(sequence)
}
kmers<- c("ACCGA",
"CCGAA",
"CGAAG",
"GAAGC",
"AAGCT")
cat(string_spelled(kmers))
composition_k <- function(sequence, k){
k_mers <- lapply(sequence,function(x){
seq_loop_size <- nchar(x)-k+1
kmers <- sapply(1:seq_loop_size, function(z){
y <- z + k -1
kmer <- substr(x=x, start=z, stop=y)
return(kmer)
})
return(kmers)
})
uniq <- (unlist(k_mers))
return(sort(uniq))
}
file <- readLines("data/string_com.txt")
sequence <- file[3]
k <- as.numeric(file[2])
composition_k(sequence, k)
composition_k(sequence, k)[1]
length(composition_k(sequence, k)[1])
nchar(composition_k(sequence, k)[1])
k
