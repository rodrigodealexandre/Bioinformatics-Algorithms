if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
return(output)
}
skew("CATGGGCATCGGCCATACGCC")
output = vector(0)
output = vector("0")
?vector
as.vector(0)
skew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
return(output)
}
skew("CATGGGCATCGGCCATACGCC")
skew("CATGGGCATCGGCCATACGCC")
skew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
return(cat(output))
}
skew("CATGGGCATCGGCCATACGCC")
skew("GAGCCACCGCGATA")
skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT")
length(skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT"))
a< skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT")
a<- skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT")
a
skew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
return((output))
}
a<- skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT")
a
skews <- sapply(genome, function(letter){
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
skews <- sapply(genome, function(letter){
curSkew = 0
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
skews("GAGCCACCGCGATA")
sapply(genome, function(letter){
curSkew = 0
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
genome = "GAGCCACCGCGATA"
sapply(genome, function(letter){
curSkew = 0
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
genome <- strsplit(genome, NULL)[[1]]
sapply(genome, function(letter){
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
skew(genome)
genome
skew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
return(output)
}
genome
skew(genome)
genome = "TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT"
skew(genome)
genome <- strsplit(genome, NULL)[[1]]
sapply(genome, function(letter){
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
skews <- sapply(genome, function(letter){
if(letter=="G"){
curSkew <<- curSkew + 1
}
else if(letter=="C"){
curSkew <<- curSkew - 1
}
return(curSkew)
})
minSkew = min(skews)
minSkew
minSkewIndexes <- which(skews==minSkew, arr.ind=T)
minSkewIndexes
minskew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
minSkew = min(output)
minSkewIndexes <- which(output==minSkew, arr.ind=T)
return(list(minSkew=minSkew, indexes=minSkewIndexes))
}
genome
genome = "TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT"
minskew(genome)
minskew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
minSkew = min(output)
minSkewIndexes <- which(output==minSkew, arr.ind=T)
return(list(minSkew=minSkew, indexes=minSkewIndexes-1))
}
minskew(genome)
minSkewIndexes
minskew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
minSkew = min(output)
minSkewIndexes <- which(output==minSkew, arr.ind=T)
#note that the -1 is there because the answer was in python
return(minSkewIndexes-1))
}
minskew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
minSkew = min(output)
minSkewIndexes <- which(output==minSkew, arr.ind=T)
#note that the -1 is there because the answer was in python
return(minSkewIndexes-1)
}
minskew(genome)
genome <- readLines("dataset_7_6.txt")
minskew(genome)
genome <- readLines("dataset_7_6.txt")
minskew("CATTCCAGTACTTCATGATGGCGTGAAGA")
skew("CATTCCAGTACTTCATGATGGCGTGAAGA")
maxskew <- function(genome){
output = as.vector(0)
count = 0
n = 2
genome <- strsplit(genome, NULL)[[1]]
for(x in genome){
if(x == "G"){
count = count + 1
}
else if(x == "C"){
count = count - 1
}
output[n] <- count
n = n+1
}
maxSkew = max(output)
maxSkewIndexes <- which(output==maxSkew, arr.ind=T)
#note that the -1 is there because the answer was in python
return(maxSkewIndexes-1)
}
maxkew("CATTCCAGTACTTCATGATGGCGTGAAGA")
maxskew("CATTCCAGTACTTCATGATGGCGTGAAGA")
?countOverlaps
genome = DNAString("AACAAGCTGATAAACATTTAAAGAG")
pattern = DNAString("AAAAA")
findOverlaps(genome, pattern)
findOverlaps(AACAAGCTGATAAACATTTAAAGAG, pattern)
findOverlaps("AACAAGCTGATAAACATTTAAAGAG", pattern)
findOverlaps(pattern,genome)
findOverlaps(pattern, "AACAAGCTGATAAACATTTAAAGAG")
findOverlaps("AAAAA", "AACAAGCTGATAAACATTTAAAGAG")
findOverlaps( "AACAAGCTGATAAACATTTAAAGAG", "AAAAA")
?alphabetFrequency
alphabetFrequency(genome)
letterFrequency(genome)
letterFrequency(genome, pattern)
letterFrequency(genome, "AAAAA")
letterFrequency(genome, "A")
?matchPattern,
?matchPattern
matchPattern(pattern, genome)
matchPattern(pattern, genome,max.mismatch=1)
genome = DNAString("TACGCATTACAAAGCACA")
pattern = DNAString("AA")
matchPattern(pattern, genome,max.mismatch=1)
genome = DNAString("TAGC")
pattern = DNAString("TAGC")
matchPattern(pattern, genome,max.mismatch=1)
seq1= "GGGCCGTTGGT"
seq2= "GGACCGTTGAC"
library("stringdist")
stringdist(seq1, seq2, method="h")
library("Biostrings")
compare <- DNAStringSet(c(seq1, seq2))
stringDist(compare, method = "hamming")
seq1= "TAGGTTCACATCCTTTCAACGTACTGCGGGTGCCAAAGGATTTGGCAACGAAGGAGAGGTGACAGGTATTCCTTTCGGTCCCCGCTCGGTCAGGATTGGTCCTTTTCAAAAGTCGAGGTTACGTCATGGAATGTTCATACTCTCTATACACAGCTAGGAACGAACCGGGTATCTTCTGAATTCGACGGGCACGAATTGCGGCTTAACCCCATCCGACATACTTGCTCCCTGACCCAAAAGGAGTTTACGGTTGGGGATAGGCGGCAAACCGTCCGCGATACTCCCATAGGTCAGTCAGGCGTACCGGCCTAAGCGATTGTGAAACAAGCAGGAGCATTAATTTGTTTCTGGCACGACCCTCAAGGTCGTAGGGCGTCTTCTGACTTTGATACGGAGCCAAGCATATGGCGCACGGTTTAGTTATCCGTCACAATGTCTGTCTACGCCATCGGGGGTCACGGACGGGGTGACTGTTCCTACTCCGAGGCTTAGCTTGGCGAACGCACCAGCGTGGCTTCTCGGTTTAGGTATTCGCATATTCTTCGTCAGCATGTTCGAACTCCAGTAGCTGTCTATAGCGACTGCATTTGTCCCTCCCGGGCAAAGGGGTAACGTATAGCGTTTCCCGGTAGATGTGAGGGGGTCGACATGCGAAATGTGCACGCCTAAGATACAGGCTAAATATGTGGATTAGGGGTTCTTATATCGGTGCCTTAATCCTGGTAAGACTGAAACATCTTTACTTGTTGGCACCTCGGACGTGCCTCCCCCGGACTGTCAATCAGGGGGCCCCAGCAAATCCTAACGGCCTGAGGATAACGATACTATGTGGAATTTCATCTAATGCGTTTACGGGTACTCCAGACAGCGCAAGTAGCCTAAGACCCGTTGCAGTAGATCACTTTGAGACCTATACGTACCCCCAAGAAGGAGGTGCCTGCTACACTCTTTAAGTGGATCGGTACATGTTATCCGGACCGGAACGCACAATGACTTTAAATGAGGGTGGAAACATTGTAGAGTGCGTGCGAGCTTGGCCCCAGGACCAGTGACGTGACCGCCGCCTCGCCCGCTTTTTCAGTCTAAGGGGTCTAGTAAGTAAGGCACGATGGAGCTAGGGACCAACGGGTTTGGAAACCTCACGAAATTAATAACGAACCCTCCGGAATGGATAGCGGTAAATGTGATTT"
seq2= "GGCTCCTATAACGTGTTCCCCTAACGTTATAAACAGACGGACCCCGGCCTTTAAAACACTGACTGGTCGCAACTAGAGTGGCGAGATGTAATGCTGCGCGCCCATACTTTGTTAATAATGACATTCCGTGAAGGATTTGACCCCGCTACATATTCAGACCACCGGCCGCTACCTTACTCGTATCATAGCATGTTCTCCCCAGGATAGTGCCTGAACCGCTAATTCAAAAAAACCTGGGAAATTAGAACTATCGCCATGTGGCCGGGCTTCTGACAAACCAGCACGGTTCTCAGGGTTCTTAACCAAGTGTTGTTTCGTGGCTGAAAAGTCGCGGAGACCCCGGCTTCAGCTAGGGGGCGGCCTACATTCGGTCTATGATTCTAGAGTCAATAATTAGCCCGAGAGTCCAGGCATATGACAGCACGATAATTATCACGATCCTAATTACAATCTAGGGGGTGTCTAGTGTCCAAGACAGTCAGACAACGATATGCAGCAAGGCGTCGGCATCAACTTCATCAGCGAGACAGAACTGTGTAGAGACCGACAGAAGACGATTTGCTCCGGCCCGTAAGGTTCTGGGCTCCATATTAGCCAAATAAAAGCTCAGAATCTCACTTGCCCCCGGGGGACGTTCTCTCGAGGGGAGAACCTTTGCCTACTGGACCCGCCCAGGCAGACCCAGTCTCTTTCCCCGGGGCGACACCGTTGCATTCCGTAAGCCGACTTAGACTAGGCCCTGGGACTAACGCCTCTCCGCCCGAACTAATTTCCCTTCCTCATTTTTCCGACTCCTCGAAGGACATAGAAGTTTCGGCTACCAGACCCACCTATCATCATTATACATCTAAAAAGCGGTACCCGAGTGTCACGCATTAGATTCAATTAGGTTGGCAGGCCCAGTAACGCATCACGTGGATTGAGTCGCACGTTAAGAACGGCTTCGGGTCAGCGCAGTCTCACATACGAGAGGATGGCAATGAGACATCTCACGATCACTGTGAGCCACGTTCGCCTGCAGCACGGTGACTAAGTTTTGTTAGTACTAGCAAGTTAAGCGCGTACGTGACGTCCGGCCTCGATCACCCGTGGTCAAACCTTAGCTGCGGGTAACAGCAAAATCCGCTCGCGATCCATCTCGTTTCGCGTCGTATATATGAAGACGTTGCGATATATATTAAATCCTCGAT"
library("stringdist")
stringdist(seq1, seq2, method="h")
library("Biostrings")
compare <- DNAStringSet(c(seq1, seq2))
stringDist(compare, method = "hamming")
library("Biostrings", lib.loc="D:/Program Files/RRO/R-3.1.1/library")
translate(DNAString("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA"))
translate(RNAString("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA"))
sequence <- RNAString(readLines("dataset_96_5.txt"))
translate(sequence)
as.vector(translate(sequence))
as.string(translate(sequence))
string(translate(sequence))
?translate
as.character(translate(sequence))
sequence <- RNAString(readLines("dataset_96_5.txt"))
as.character(translate(sequence))
sequence <- RNAString(readLines("dataset_96_5.txt"))
aa <- (translate(sequence)
aa
sequence <- RNAString(readLines("dataset_96_5.txt"))
aa <- (translate(sequence))
aa
translate(aa)
translate("ATC")
translate(DNAString("ATC")
)
translate(DNAString("ATC"))
translate(RNAString("I"))
y <- c("ATGCATTGGACGTTAG") # Creates sample DNA sequence.
AAdf <- read.table(file="http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/My_R_Scripts/AA.txt", header=T,"\t") # Imports genetic code.
AAv <- AAdf[,2]; names(AAv) <- AAdf[,1] # Creates named vector with genetic code
y <- gsub("(...)", "\\1_", y) # Inserts "_" after each triplet.
y <- unlist(strsplit(y, "_")) # Splits on "_" and returns vectorized triplets.
y <- y[grep("^...$", y)] # Removes incomplete triplets.
AAv[y] # Translation into protein by name-based subsetting.
source('D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Codes R/Skew_i - Min - Max.R', echo=TRUE)
x <- n*(n+1)/2+1
n = 10730
n*(n+1)/2+1
n = 16542
n*(n+1)/2+1
0 57 57 71 71 71 71 97 97 101 101 101 101 103 113 113 113 114 115 115 115 128 128 128 129 129 129 129 131 131 131 137 142 147 147 147 147 154 156 156 156 163 163 186 186 186 186 188 202 210 215 216 218 218 226 228 229 229 229 230 232 232 232 234 234 234 241 243 243 257 260 260 267 269 270 271 275 276 276 278 285 291 293 293 299 301 303 305 310 314 315 317 329 331 333 338 340 342 344 344 346 349 356 358 360 363 365 365 371 376 377 379 381 381 382 384 385 385 388 389 395 402 405 406 415 418 420 420 420 422 430 431 439 446 449 450 452 453 453 457 457 457 460 462 464 466 473 485 486 486 489 493 496 496 502 503 505 506 507 512 517 519 521 528 531 533 544 545 548 549 549 554 562 563 564 566 567 570 571 574 578 578 581 583 586 593 594 597 599 600 606 611 613 613 615 616 617 620 620 622 631 634 645 646 649 649 659 664 667 672 675 675 677 682 682 684 687 689 691 691 691 691 694 694 696 696 700 711 713 720 721 724 726 728 730 730 732 735 741 741 746 749 750 753 760 762 764 774 778 778 788 795 797 797 801 802 803 803 806 806 806 812 820 820 822 823 824 825 829 831 831 835 838 841 841 850 854 861 863 863 867 874 875 875 877 877 877 880 882 888 891 903 904 906 907 909 910 910 925 925 926 930 932 934 934 937 939 942 942 945 948 950 951 959 959 960 960 962 962 969 980 982 991 997 1001 1004 1004 1006 1008 1011 1017 1019 1021 1022 1022 1023 1030 1031 1031 1035 1035 1035 1040 1040 1054 1054 1057 1063 1066 1066 1067 1070 1070 1072 1073 1076 1079 1079 1090 1092 1093 1095 1097 1101 1106 1111 1111 1112 1116 1120 1126 1132 1137 1144 1145 1148 1150 1151 1151 1153 1160 1166 1167 1168 1168 1169 1170 1171 1173 1177 1179 1182 1182 1185 1187 1191 1194 1201 1203 1208 1208 1208 1216 1219 1221 1223 1223 1227 1232 1237 1238 1240 1240 1242 1244 1245 1245 1253 1258 1267 1272 1280 1282 1286 1295 1297 1297 1298 1302 1302 1305 1307 1307 1309 1311 1313 1315 1316 1323 1324 1326 1331 1333 1336 1337 1338 1339 1341 1342 1345 1347 1350 1352 1355 1355 1359 1366 1368 1370 1373 1383 1384 1396 1399 1399 1400 1402 1405 1408 1412 1417 1424 1426 1435 1436 1437 1437 1441 1442 1444 1448 1451 1451 1452 1453 1454 1454 1460 1461 1462 1463 1468 1470 1472 1474 1479 1488 1488 1493 1497 1497 1497 1499 1499 1505 1511 1525 1530 1531 1531 1533 1536 1536 1541 1550 1552 1552 1552 1555 1559 1562 1563 1565 1566 1570 1571 1571 1573 1576 1576 1582 1585 1588 1591 1593 1598 1600 1601 1601 1608 1612 1619 1624 1625 1626 1628 1630 1633 1634 1634 1637 1646 1647 1651 1653 1653 1660 1662 1665 1672 1680 1681 1683 1686 1690 1692 1694 1694 1697 1698 1700 1704 1713 1717 1717 1721 1723 1726 1727 1729 1729 1740 1747 1748 1748 1751 1751 1754 1757 1757 1761 1762 1762 1763 1764 1765 1765 1768 1775 1775 1781 1782 1786 1791 1793 1798 1800 1803 1808 1811 1819 1819 1822 1823 1828 1836 1841 1842 1845 1846 1848 1856 1857 1861 1864 1864 1866 1869 1872 1876 1876 1880 1882 1886 1890 1890 1891 1894 1894 1896 1899 1901 1904 1905 1907 1909 1910 1911 1912 1917 1920 1929 1931 1931 1932 1947 1947 1951 1953 1957 1964 1972 1973 1977 1979 1982 1983 1991 1993 1993 1994 1997 2001 2003 2004 2005 2008 2014 2016 2018 2020 2022 2022 2023 2027 2028 2030 2032 2032 2038 2042 2043 2045 2048 2050 2054 2057 2057 2058 2061 2067 2074 2075 2079 2079 2082 2094 2098 2108 2114 2115 2118 2119 2120 2125 2129 2133 2133 2133 2136 2138 2141 2142 2145 2146 2146 2147 2149 2150 2151 2156 2157 2157 2170 2174 2176 2177 2179 2179 2182 2183 2186 2190 2190 2204 2205 2207 2208 2213 2222 2227 2229 2234 2237 2243 2243 2246 2246 2247 2248 2248 2254 2257 2260 2261 2261 2262 2265 2265 2267 2271 2272 2275 2276 2277 2278 2285 2289 2294 2299 2302 2308 2311 2313 2324 2328 2329 2330 2332 2335 2337 2337 2342 2347 2349 2356 2358 2360 2361 2362 2362 2363 2368 2372 2374 2374 2377 2379 2385 2385 2393 2393 2394 2396 2403 2408 2416 2417 2422 2424 2427 2431 2439 2439 2439 2440 2442 2448 2450 2450 2453 2453 2456 2458 2458 2459 2459 2475 2475 2476 2477 2478 2479 2487 2489 2491 2494 2494 2495 2497 2500 2503 2510 2510 2510 2510 2517 2518 2518 2521 2521 2528 2553 2560 2560 2563 2563 2564 2571 2571 2571 2571 2578 2581 2584 2586 2587 2587 2590 2592 2594 2602 2603 2604 2605 2606 2606 2622 2622 2623 2623 2625 2628 2628 2631 2631 2633 2639 2641 2642 2642 2642 2650 2654 2657 2659 2664 2665 2673 2678 2685 2687 2688 2688 2696 2696 2702 2704 2707 2707 2709 2713 2718 2719 2719 2720 2721 2723 2725 2732 2734 2739 2744 2744 2746 2749 2751 2752 2753 2757 2768 2770 2773 2779 2782 2787 2792 2796 2803 2804 2805 2806 2809 2810 2814 2816 2816 2819 2820 2820 2821 2824 2827 2833 2833 2834 2835 2835 2838 2838 2844 2847 2852 2854 2859 2868 2873 2874 2876 2877 2891 2891 2895 2898 2899 2902 2902 2904 2905 2907 2911 2924 2924 2925 2930 2931 2932 2934 2935 2935 2936 2939 2940 2943 2945 2948 2948 2948 2952 2956 2961 2962 2963 2966 2967 2973 2983 2987 2999 3002 3002 3006 3007 3014 3020 3023 3024 3024 3027 3031 3033 3036 3038 3039 3043 3049 3049 3051 3053 3054 3058 3059 3059 3061 3063 3065 3067 3073 3076 3077 3078 3080 3084 3087 3088 3088 3090 3098 3099 3102 3104 3108 3109 3117 3124 3128 3130 3134 3134 3149 3150 3150 3152 3161 3164 3169 3170 3171 3172 3174 3176 3177 3180 3182 3185 3187 3187 3190 3191 3191 3195 3199 3201 3205 3205 3209 3212 3215 3217 3217 3220 3224 3225 3233 3235 3236 3239 3240 3245 3253 3258 3259 3262 3262 3270 3273 3278 3281 3283 3288 3290 3295 3299 3300 3306 3306 3313 3316 3316 3317 3318 3319 3319 3320 3324 3324 3327 3330 3330 3333 3333 3334 3341 3352 3352 3354 3355 3358 3360 3364 3364 3368 3377 3381 3383 3384 3387 3387 3389 3391 3395 3398 3400 3401 3409 3416 3419 3421 3428 3428 3430 3434 3435 3444 3447 3447 3448 3451 3453 3455 3456 3457 3462 3469 3473 3480 3480 3481 3483 3488 3490 3493 3496 3499 3505 3505 3508 3510 3510 3511 3515 3516 3518 3519 3522 3526 3529 3529 3529 3531 3540 3545 3545 3548 3550 3550 3551 3556 3570 3576 3582 3582 3584 3584 3584 3588 3593 3593 3602 3607 3609 3611 3613 3618 3619 3620 3621 3627 3627 3628 3629 3630 3630 3633 3637 3639 3640 3644 3644 3645 3646 3655 3657 3664 3669 3673 3676 3679 3681 3682 3682 3685 3697 3698 3708 3711 3713 3715 3722 3726 3726 3729 3731 3734 3736 3739 3740 3742 3743 3744 3745 3748 3750 3755 3757 3758 3765 3766 3768 3770 3772 3774 3774 3776 3779 3779 3783 3784 3784 3786 3795 3799 3801 3809 3814 3823 3828 3836 3836 3837 3839 3841 3841 3843 3844 3849 3854 3858 3858 3860 3862 3865 3873 3873 3873 3878 3880 3887 3890 3894 3896 3899 3899 3902 3904 3908 3910 3911 3912 3913 3913 3914 3915 3921 3928 3930 3930 3931 3933 3936 3937 3944 3949 3955 3961 3965 3969 3970 3970 3975 3980 3984 3986 3988 3989 3991 4002 4002 4005 4008 4009 4011 4011 4014 4015 4015 4018 4024 4027 4027 4041 4041 4046 4046 4046 4050 4050 4051 4058 4059 4059 4060 4062 4064 4070 4073 4075 4077 4077 4080 4084 4090 4099 4101 4112 4119 4119 4121 4121 4122 4122 4130 4131 4133 4136 4139 4139 4142 4144 4147 4147 4149 4151 4155 4156 4156 4171 4171 4172 4174 4175 4177 4178 4190 4193 4199 4201 4204 4204 4204 4206 4206 4207 4214 4218 4218 4220 4227 4231 4240 4240 4243 4246 4250 4250 4252 4256 4257 4258 4259 4261 4261 4269 4275 4275 4275 4278 4278 4279 4280 4284 4284 4286 4293 4303 4303 4307 4317 4319 4321 4328 4331 4332 4335 4340 4340 4346 4349 4351 4351 4353 4355 4357 4360 4361 4368 4370 4381 4385 4385 4387 4387 4390 4390 4390 4390 4392 4394 4397 4399 4399 4404 4406 4406 4409 4414 4417 4422 4432 4432 4435 4436 4447 4450 4459 4461 4461 4464 4465 4466 4468 4468 4470 4475 4481 4482 4484 4487 4488 4495 4498 4500 4503 4503 4507 4510 4511 4514 4515 4517 4518 4519 4527 4532 4532 4533 4536 4537 4548 4550 4553 4560 4562 4564 4569 4574 4575 4576 4578 4579 4585 4585 4588 4592 4595 4595 4596 4608 4615 4617 4619 4621 4624 4624 4624 4628 4628 4629 4631 4632 4635 4642 4650 4651 4659 4661 4661 4661 4663 4666 4675 4676 4679 4686 4692 4693 4696 4696 4697 4699 4700 4700 4702 4704 4705 4710 4716 4716 4718 4721 4723 4725 4732 4735 4737 4737 4739 4741 4743 4748 4750 4752 4764 4766 4767 4771 4776 4778 4780 4782 4788 4788 4790 4796 4803 4805 4805 4806 4810 4811 4812 4814 4821 4821 4824 4838 4838 4840 4847 4847 4847 4849 4849 4849 4851 4852 4852 4852 4853 4855 4863 4863 4865 4866 4871 4879 4893 4895 4895 4895 4895 4918 4918 4925 4925 4925 4927 4934 4934 4934 4934 4939 4944 4950 4950 4950 4952 4952 4952 4952 4953 4953 4953 4966 4966 4966 4967 4968 4968 4968 4978 4980 4980 4980 4980 4984 4984 5010 5010 5010 5010 5024 5024 5081
q()
library("biostring")
library("Biotring")
library("BioString")
library("BioStrings")
library("Biostrings")
translate(RNAString("CCACGUACUGAAAUUAAC"))
translate(RNAString("CCCAGUACCGAAAUUAAC."))
translate(RNAString("CCCAGUACCGAAAUUAAC"))
translate(RNAString("CCAAGUACAGAGAUUAAC"))
translate(RNAString("CCGAGGACCGAAAUCAAC"))
source("aa_nomeclature.R")
#load table
RNA_Codon <- read.table("RNA_Codon.txt")
#Count the number of different RNA sequences possible with a given AA sequence.
n_DNAStrings_from_AA <- function(sequence){
#type aaa refers to when you have a 3 letters nomenclature for the AA spaced by "-".
#type a refers to when you have a 1 letter nomenclature for the AA not spaced.
if(grepl("-", sequence)){
type = "aaa"
}
else{
type = "a"
}
if(type=="aaa"){
sequence <- aaa_to_a(sequence)
sequence <- strsplit(sequence, NULL)[[1]]
sequence <- sapply(sequence, function(pep){
length(grep(pep, RNA_Codon[,2]))
})
return(prod(sequence))
}
if(type=="a"){
sequence <- strsplit(sequence, NULL)[[1]]
sequence <- sapply(sequence, function(pep){
length(grep(pep, RNA_Codon[,2]))
})
return(prod(sequence))
}
}
n_DNAStrings_from_AA("LEADER")
#-------------------------------------------------
setwd("D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Codes R/My codes for week 2")
setwd("D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Codes R/My codes for week 2")
setwd("D:\Dropbox\Courses\Coursera Courses\Bioinformatics Algorithms (Part 1)\Bioinformatics-Algorithms\Codes R\My codes for week 2")
setwd("D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2")
n_DNAStrings_from_AA("LEADER")
#-------------------------------------------------
setwd("D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2")
source("aa_nomeclature.R")
#load table
RNA_Codon <- read.table("RNA_Codon.txt")
#Count the number of different RNA sequences possible with a given AA sequence.
n_DNAStrings_from_AA <- function(sequence){
#type aaa refers to when you have a 3 letters nomenclature for the AA spaced by "-".
#type a refers to when you have a 1 letter nomenclature for the AA not spaced.
if(grepl("-", sequence)){
type = "aaa"
}
else{
type = "a"
}
if(type=="aaa"){
sequence <- aaa_to_a(sequence)
sequence <- strsplit(sequence, NULL)[[1]]
sequence <- sapply(sequence, function(pep){
length(grep(pep, RNA_Codon[,2]))
})
return(prod(sequence))
}
if(type=="a"){
sequence <- strsplit(sequence, NULL)[[1]]
sequence <- sapply(sequence, function(pep){
length(grep(pep, RNA_Codon[,2]))
})
return(prod(sequence))
}
}
n_DNAStrings_from_AA("LEADER")
source('D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2/all codes.R', echo=TRUE)
setwd("D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2")
source('D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2/all codes.R', echo=TRUE)
source('D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2/all codes.R', echo=TRUE)
#-------------------------------------------------
source('D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2/all codes.R', echo=TRUE)
linear_spectrum <- function(sequence){
mass <- 0
if(length(sequence) == 1){
if(grepl("-", sequence)){
sequence <- aaa_to_a(sequence)
}
split_seq <- strsplit(sequence, NULL)[[1]]
n <- length(split_seq)
count <- 1
for(i in 1:n){
for(c in 1:i){
count <- count + 1
mass[count] <- aa_mass(paste(split_seq[c:i], collapse=""))
}
}
}
else{
spec <- sequence
n <- length(spec)
count <- 1
for(i in 1:n){
for(c in 1:i){
count <- count + 1
mass[count] <- sum(as.numeric(paste(spec[c:i])))
}
}
}
return(sort(mass))
}
source('D:/Dropbox/Courses/Coursera Courses/Bioinformatics Algorithms (Part 1)/Bioinformatics-Algorithms/Codes R/My codes for week 2/all codes.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
aa_seqence("G")
aa_seqence("GATA")
aa_mass("G")
cyclopeptide_mass_spectrum("MIAT")
0  71 101 113 131 184 202 214 232 285 303 315 345 416
cyclopeptide_mass_spectrum("MLAT")
cyclopeptide_mass_spectrum("TLAM")
cyclopeptide_mass_spectrum("ALTM")
cyclopeptide_mass_spectrum("MAIT")
cyclopeptide_mass_spectrum("MTAL")
peptide_score("MAMA","0 71 98 99 131 202 202 202 202 202 299 333 333 333 503")
linear_peptide_scoring("PEEP","0 97 97 97 100 129 194 226 226 226 258 323 323 355 393 452")
linear_peptide_scoring("VAQ","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("TCQ","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("TCE","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("CET","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("ETC","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("TVQ","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_spectrum("CET")
linear_spectrum("TVQ")
leaderboard_cyclopeptide_sequencing("0 57 118 179 236 240 301", 100)
leaderboard_cyclopeptide_sequencing("0 57 118 179 236 240 301", 400)
aa_mass("Q")
cyclopeptide_sequencing("MAMA")
cyclopeptide_mass_spectrum("MAMA")
linear_spectrum("PEEP")
linear_peptide_scoring("QCV","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("CTV","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("VAQ","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
linear_peptide_scoring("CTQ","0 71 99 101 103 128 129 199 200 204 227 230 231 298 303 328 330 332")
leaderboard_cyclopeptide_sequencing("0 57 118 179 236 240 301", 400)
leaderboard_cyclopeptide_sequencing("0 86 160 234 308 320 382", 400)
