compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){scoring(spectrum, x)})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
compose <- compose[!is.na(compose[,1]),]
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){scoring(spectrum, x)})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
compose <- compose[!is.na(compose[,1]),]
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){scoring(spectrum, x)})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
compose <- compose[!is.na(compose[,1]),]
compose
unique_values <- unique(pep_mass[,2])
compose <- unique(pep_mass[,2])
score <- 0
spec <- NULL
count <- 1
compose <- as.data.frame(compose)
names(compose) <- paste("Var", count, sep="")
compose
peptide_score <- function(sequence, spectrum){
if(length(sequence) == 1){
if(grepl("-", sequence)){
sequence <- aaa_to_a(sequence)
}
sequence <- cyclopeptide_mass_spectrum(sequence)
}
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
score <- 0
for(s in spectrum){
if(s %in% sequence){
sequence <- sequence[-which(sequence==s)[1]]
score <- score + 1
}
}
return(score)
}
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){scoring(spectrum, x)})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
compose <- compose[!is.na(compose[,1]),]
print("1loop")
for(z in 1:length(compose[,1])){
if(sum(compose[z,])==max_mass){
if(scores[z] > score){
score <- scores[z]
spec <- compose[z,]
}
}
}
compose
test <- compose
test[,length(test)+1] <- scores
scores
test <- compose
test[,length(test)+1] <- scores
compose
remove.na
remove.na()
scores[!is.na]
scores[!is.na()]
scores[!is.na(socres)]
scores[!is.na(scores)]
scores <- scores[!is.na(scores)]
test <- compose
test[,length(test)+1] <- scores
test
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){scoring(spectrum, x)})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
scores <- scores[!is.na(scores),]
compose <- compose[!is.na(compose[,1]),]
compose
test <- compose
test[,length(test)+1] <- scores
test
test[1,]
scoring <-function(sequence, spectrum){
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
sequence <- linear_spectrum(spectrum)
score <- peptide_score(sequence, spectrum)
return(score)
}
scoring(test[1,],spectrum)
scoring(spectrum,test[1,])
scoring(spectrum,test[1,])
test[1,]
spectrum
as.numeric(test[1,])
scoring(spectrum,as.numeric(test[1,]))
scoring(spectrum,test[1,])
scoring <-function(sequence, spectrum){
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
sequence <- linear_spectrum(spectrum)
score <- sum(table(sequence[sequence %in% spectrum]))
return(score)
}
scoring(spectrum,test[1,])
scoring(spectrum,test[1,])
scoring(test[1,],spectrum)
sequence <- linear_spectrum(sequence)
sequence
sequence
linear_spectrum(test[1,])
test[1,]
test[1,1:3]
linear_spectrum(test[1,1:3])
scoring(linear_spectrum(test[1,1:3]),spectrum)
table(sequence[sequence %in% linear_spectrum(test[1,1:3])])
sum(table(sequence[sequence %in% linear_spectrum(test[1,1:3])]))
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
(table(linear_spectrum(test[1,1:3])[linear_spectrum(test[1,1:3]) %in% spectrum]))
peptide_score(spectrum, linear_spectrum(test[1,1:3])])
peptide_score(spectrum, linear_spectrum(test[1,1:3]))
peptide_score(linear_spectrum(test[1,1:3],spectrum ))
peptide_score(linear_spectrum(test[1,1:3]), spectrum)
for(n in 1:1000){
peptide_score(linear_spectrum(test[1,1:3]), spectrum)
})
system.time({
for(n in 1:1000){
peptide_score(linear_spectrum(test[1,1:3],spectrum ))
})
system.time({
for(n in 1:1000){
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
})
system.time({
for(n in 1:1000){
sum(table(spectrum[linear_spectrum(test[1,1:3]) %in% spectrum]))
})
system.time({
for(n in 1:1000){
peptide_score(linear_spectrum(test[1,1:3]), spectrum)
}})
system.time({
for(n in 1:1000){
peptide_score(linear_spectrum(test[1,1:3],spectrum ))
}})
system.time({
for(n in 1:1000){
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
}})
system.time({
for(n in 1:1000){
sum(table(spectrum[linear_spectrum(test[1,1:3]) %in% spectrum]))
}})
system.time({
for(n in 1:1000){
peptide_score(linear_spectrum(test[1,1:3]), spectrum)
}})
system.time({
for(n in 1:1000){
peptide_score(linear_spectrum(test[1,1:3]),spectrum)
}})
system.time({
for(n in 1:1000){
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
}})
system.time({
for(n in 1:1000){
sum(table(spectrum[linear_spectrum(test[1,1:3]) %in% spectrum]))
}})
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
system.time({
for(n in 1:1000){
sum(table(linear_spectrum(test[1,1:3])[linear_spectrum(test[1,1:3]) %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(lin[lin %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(lin[lin %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(spectrum[spectrum %in% lin]))
}})
return(score)
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(lin[lin %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(spectrum[spectrum %in% lin]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(lin[lin %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(spectrum[spectrum %in% lin]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(lin[lin %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(spectrum[spectrum %in% lin]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(lin[lin %in% spectrum]))
}})
system.time({
for(n in 1:1000){
lin <- linear_spectrum(test[1,1:3])
sum(table(spectrum[spectrum %in% lin]))
}})
system.time({
for(n in 1:1000){
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
}})
system.time({
for(n in 1:1000){
sum(table(spectrum[spectrum %in% linear_spectrum(test[1,1:3])]))
}})
compose[1,]
system.time({
for(n in 1:1000){
sum(table(spectrum[spectrum %in% linear_spectrum(compose[1,])]))
}})
leaderboard_cyclopeptide_sequencing <-function(spectrum, n){
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
if(length(spectrum) == 1){
spectrum <- cyclopeptide_mass_spectrum(spectrum)
}
spectrum <- sort(as.numeric(spectrum))
max_mass <- max(as.numeric(spectrum))
if(length(spectrum) > 2){
unique_values <- unique(pep_mass[,2])
compose <- unique(pep_mass[,2])
score <- 0
spec <- NULL
count <- 1
compose <- as.data.frame(compose)
names(compose) <- paste("Var", count, sep="")
while(TRUE){
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){
lin <- linear_spectrum(x)
sum(table(lin[lin %in% spectrum]))
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
scores <- scores[!is.na(scores),]
compose <- compose[!is.na(compose[,1]),]
print("1loop")
for(z in 1:length(compose[,1])){
if(sum(compose[z,])==max_mass){
if(scores[z] > score){
score <- scores[z]
spec <- compose[z,]
}
}
}
test <- compose
test[,length(test)+1] <- scores
}
result <- paste(spec, collapse="-")
result <- paste(result, "score =", score)
return(result)
}
}
leaderboard_cyclopeptide_sequencing <-function(spectrum, n){
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
if(length(spectrum) == 1){
spectrum <- cyclopeptide_mass_spectrum(spectrum)
}
spectrum <- sort(as.numeric(spectrum))
max_mass <- max(as.numeric(spectrum))
if(length(spectrum) > 2){
unique_values <- unique(pep_mass[,2])
compose <- unique(pep_mass[,2])
score <- 0
spec <- NULL
count <- 1
compose <- as.data.frame(compose)
names(compose) <- paste("Var", count, sep="")
while(TRUE){
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){
lin <- linear_spectrum(x)
sum(table(lin[lin %in% spectrum]))})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
scores <- scores[!is.na(scores),]
compose <- compose[!is.na(compose[,1]),]
print("1loop")
for(z in 1:length(compose[,1])){
if(sum(compose[z,])==max_mass){
if(scores[z] > score){
score <- scores[z]
spec <- compose[z,]
}
}
}
test <- compose
test[,length(test)+1] <- scores
}
result <- paste(spec, collapse="-")
result <- paste(result, "score =", score)
return(result)
}
}
file <- readLines("data/leaderboard.txt")
spectrum <- file[3]
n <- file[2]
leaderboard_cyclopeptide_sequencing(spectrum, n)
leaderboard_cyclopeptide_sequencing <-function(spectrum, n){
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
if(length(spectrum) == 1){
spectrum <- cyclopeptide_mass_spectrum(spectrum)
}
spectrum <- sort(as.numeric(spectrum))
max_mass <- max(as.numeric(spectrum))
if(length(spectrum) > 2){
unique_values <- unique(pep_mass[,2])
compose <- unique(pep_mass[,2])
score <- 0
spec <- NULL
count <- 1
compose <- as.data.frame(compose)
names(compose) <- paste("Var", count, sep="")
while(TRUE){
print(count)
count <- count + 1
unique_values <- as.data.frame(unique_values)
names(unique_values) <- paste("Var", count, sep="")
compose <- as.data.frame(compose)
compose <- lapply(1:length(compose[,1]), function(x){
do.call('expand.grid', c(compose[x,],unique_values))})
compose <- ldply(compose)
compose <- compose[apply(compose, 1, sum) <= max_mass,]
if(length(compose[,1])==0){
break
}
print("scoring")
scores <- apply(compose, 1, function(x){
lin <- linear_spectrum(x)
sum(table(lin[lin %in% spectrum]))})
print("endscoring")
compose <- compose[order(scores, decreasing=TRUE)[1:n],]
scores <- scores[order(scores, decreasing=TRUE)[1:n]]
scores <- scores[!is.na(scores)]
compose <- compose[!is.na(compose[,1]),]
print("1loop")
for(z in 1:length(compose[,1])){
if(sum(compose[z,])==max_mass){
if(scores[z] > score){
score <- scores[z]
spec <- compose[z,]
}
}
}
test <- compose
test[,length(test)+1] <- scores
}
result <- paste(spec, collapse="-")
result <- paste(result, "score =", score)
return(result)
}
}
file <- readLines("data/leaderboard.txt")
spectrum <- file[3]
n <- file[2]
leaderboard_cyclopeptide_sequencing(spectrum, n)
file <- readLines("data/dataset_102_7 (1).txt")
spectrum <- file[2]
n <- file[1]
leaderboard_cyclopeptide_sequencing(spectrum, n)
peptide_score <- function(sequence, spectrum){
if(length(sequence) == 1){
if(grepl("-", sequence)){
sequence <- aaa_to_a(sequence)
}
sequence <- cyclopeptide_mass_spectrum(sequence)
}
if(length(spectrum) == 1){
spectrum <- strsplit(spectrum, "\\s" )[[1]]
}
score <- sum(table(spectrum[spectrum %in% sequence]))
return(score)
}
file <- readLines("data/dataset_4913_1.txt")
sequence <- file[1]
spectrum <- file[2]
score <- peptide_score(sequence, spectrum)
cat(score)
#--------------
file <- readLines("data/dataset_4913_1 (1).txt")
sequence <- file[1]
spectrum <- file[2]
score <- peptide_score(sequence, spectrum)
cat(score)
